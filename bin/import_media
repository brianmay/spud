#!/usr/bin/python
# -*- coding: utf-8 -*- 
from django.core.management import setup_environ
from photos import settings
setup_environ(settings)

import os
import shutil
import sys
import pytz
import datetime

from django.conf import settings
from django.db import transaction

from spud import models, media

from optparse import OptionParser


class photo_already_exists_error(Exception):
        def __init__(self, value):
                self.value = value

        def __str__(self):
                return repr(self.value)


def set_album_list(photo, pk_list):
    pa_list = photo.photo_album_set.all()
    for pa in pa_list:
        if pa.album.pk in pk_list:
            pk_list.remove(pa.album.pk)
        else:
            pa.delete()

    for pk in pk_list:
        pa = models.photo_album.objects.create(photo=photo,album_id=pk)

def set_category_list(photo, pk_list):
    pa_list = photo.photo_category_set.all()
    for pa in pa_list:
        if pa.category.pk in pk_list:
            pk_list.remove(pa.category.pk)
        else:
            pa.delete()

    for pk in pk_list:
        pa = models.photo_category.objects.create(photo=photo,category_id=pk)

@transaction.commit_on_success
def import_photo(file,d,options):
    if not os.path.exists(file):
        raise RuntimeError("source photo doesn't exist at %s"%(file))

    m = media.get_media(file)
    dt = m.get_datetime(d.src_timezone,d.dst_timezone)
    dt += d.offset
    path = "%04d/%02d/%02d"%(dt.year,dt.month,dt.day)
    name = os.path.basename(file)

    if options.dryrun:
        print "would import %s to %s/%s (%s)"%(file,path,name,dt)
        return

    print "importing %s to %s/%s"%(file,path,name)

    (shortname, extension) = os.path.splitext(name)
    photos = models.photo.objects.filter(path=path,name__startswith="%s."%(shortname))
    count = photos.count()
    if count > 1:
        raise RuntimeError("Multiple DB entries exist for %s/%s.*"%(path,shortname))

    if count > 0:
        db_exists = True
        photo = photos[0]
    else:
        db_exists = False
        photo = models.photo()

    photo.path = path
    photo.name = name
    photo.title = ''
    photo.photographer = d.photographer
    photo.location = d.location
    photo.view = ''
    photo.rating = None
    photo.description = ''
    photo.comment = ""
    photo.level = 1

    photo.timezone = dt.tzinfo.zone
    photo.datetime = dt.astimezone(pytz.utc).replace(tzinfo=None)

    error_list = photo.error_list()
    dst = photo.get_orig_path()

    if options.force:
        pass
    elif db_exists and len(error_list)==0:
        raise photo_already_exists_error("photo %d already exists at %s/%s as %s/%s"%(photo.pk,path,name,photos[0].path,photos[0].name))
    elif db_exists:
        raise RuntimeError("photo %d already exists at %s/%s as %s/%s but contains errors"%(photo.pk,path,name,photos[0].path,photos[0].name))
    elif os.path.lexists(dst):
        raise RuntimeError("file already exists at %s/%s but has no db entry"%(path,name))

    umask = os.umask(0022)

    if not os.path.lexists(os.path.dirname(dst)):
        os.makedirs(os.path.dirname(dst),0755)
    shutil.copyfile(file,dst)

    photo.action = options.action
    photo.update_from_source(media=m)

    photo.save()
    set_album_list(photo, d.albums)
    set_category_list(photo, d.categorys)

    os.umask(umask)

    print "imported  %s to %s/%s as %d"%(file,path,name,photo.pk)

class defaults:
    pass

def main():
        spud_file = u"%s/%s"%(settings.IMAGE_PATH,".spud.txt")
        if not os.path.exists(spud_file):
            raise RuntimeError("Cannot find spud file. Is '%s' mounted???"%(settings.IMAGE_PATH))

        parser = OptionParser()
        parser.add_option("-f", "--force",action="store_true", dest="force",default=False,
                          help="Force overwriting of existing photos")
        parser.add_option("-d", "--dry-run",action="store_true", dest="dryrun",default=False,
                          help="Dry run - used for testing timezone")
        parser.add_option("-p", "--photographer",action="store", dest="photographer",
                          help="Name of photographer to use when importing images")
        parser.add_option("-l", "--location",action="store", dest="location",
                          help="Name of location to use when importing images")
        parser.add_option("-r", "--rotate",action="store", dest="rotate",
                          help="Amount to rotate imported photos (auto,0,90,180,270)")
        parser.add_option("-a", "--album",action="append", dest="album",
                          help="Name of album to use when importing images")
        parser.add_option("--parent", action="store", dest="parent",
                          help="Name of parent album to use; if Album doesn't exist it will be created")
        parser.add_option("-c", "--category",action="append", dest="category",
                          help="Name of category to use when importing images")
        parser.add_option("-s", "--source-timezone",action="store", dest="src_timezone",
                          help="Source timezone that camera was set to")
        parser.add_option("-t", "--timezone",action="store", dest="dst_timezone",
                          help="Timezone that should be used to display photos")
        parser.add_option("-o", "--offset",action="store", dest="offset",
                          help="Adjust the time by [+-]HH:MM:SS")
        (options, args) = parser.parse_args()

        options.action = "R"
        if options.rotate:
            if options.action == "0":
                pass
            elif options.action == "auto":
                options.action = "auto"
            elif options.action == "90":
                options.action = "90"
            elif options.action == "180":
                options.action = "180"
            elif options.action == "270":
                options.action = "270"
            else:
                parser.error("unknown value '%s' for rotate"%(options.rotate))

        d = defaults()

        d.photographer = None
        if options.photographer is not None:
            (first_name,last_name) = options.photographer.split(" ")
            d.photographer = models.person.objects.get(first_name=first_name,last_name=last_name)

        d.location = None
        if options.location is not None:
            d.location = models.place.objects.get(title=options.location)

        d.albums = []
        if options.album is None:
            options.album = []
        if options.parent is None:
            for album in options.album:
                d.albums.append(models.album.objects.get(album=album).pk)
        else:
            parent = models.album.objects.get(album=options.parent)
            for album in options.album:
                album,c = models.album.objects.get_or_create(parent_album=parent,album=album)
                d.albums.append(album.pk)

        d.categorys = []
        if options.category is None:
            options.category = []
        for category in options.category:
            d.categorys.append(models.category.objects.get(category=category).pk)

        timezone = settings.TIME_ZONE
        if options.src_timezone is None:
            d.src_timezone = pytz.timezone(settings.TIME_ZONE)
        else:
            d.src_timezone = pytz.timezone(options.src_timezone)

        timezone = settings.TIME_ZONE
        if options.dst_timezone is None:
            d.dst_timezone = pytz.timezone(settings.TIME_ZONE)
        else:
            d.dst_timezone = pytz.timezone(options.dst_timezone)

        offset = options.offset
        if offset is not None:
            if offset[0] == '+':
                direction = 1
                offset = offset[1:]
            elif offset[0] == '-':
                direction = -1
                offset = offset[1:]
            else:
                direction = 1
            (hh,mm,ss) = offset.split(":")

            hh = int(hh)
            mm = int(mm)
            ss = int(ss)

            d.offset = direction * datetime.timedelta(hours=hh, minutes=mm, seconds=ss)
        else:
            d.offset = datetime.timedelta(hours=0, minutes=0, seconds=0)

        warnings = 0
        for arg in args:
            try:
                import_photo(arg,d,options)
            except photo_already_exists_error, e:
                warnings = warnings + 1
                sys.stderr.write( "Skipping %s due to %s\n"%(arg,e))

        if warnings > 0:
            sys.stderr.write("%d warnings found\n"%(warnings))

        return 0

if __name__ == "__main__":
    sys.exit(main())
