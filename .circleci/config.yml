# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
      # use `-browsers` prefix for selenium tests, e.g. `3.6.1-browsers`
      - image: circleci/python:3.7
        environment:
          PIPENV_VENV_IN_PROJECT: true
          DATABASE_URL: postgresql://root@localhost/circle_test?sslmode=disable

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      - image: circleci/postgres:9.6.2
        environment:
          POSTGRES_USER: root
          POSTGRES_DB: circle_test

    steps:
      - checkout

      - restore_cache:
          key: deps-{{ .Branch }}-{{ checksum "Pipfile.lock" }}

      - run:
          name: Install dependencies
          command: |
            sudo pip install pipenv
            pipenv sync --dev

      - save_cache:
          paths:
            - ".venv"
          key: deps-{{ .Branch }}-{{ checksum "Pipfile.lock" }}

      - run:
          name: Print version
          command: |
            pipenv run ./setup.py --version

      - run:
          name: Run tests
          command: |
            pipenv run isort -rc --check --diff spud
            pipenv run flake8 spud
            pipenv run ./manage.py makemigrations --settings=spud.tests.settings --check --dry-run
            pipenv run ./manage.py migrate --settings=spud.tests.settings
            pipenv run ./manage.py check --settings=spud.tests.settings
            mkdir test-reports
            pipenv run py.test --cov=spud --junitxml=test-reports/junit.xml
      - store_test_results:
          path: test-reports
      - store_artifacts:
          path: test-reports
          destination: test-reports

  deploy-beta:
    docker:
      - image: circleci/python:3.7
    steps:
      - checkout
      - run: |
          docker build \
            --file "Dockerfile" \
            --tag "brianmay/spud:latest" \
            --build-arg "BUILD_DATE=`date -u +"%Y-%m-%dT%H:%M:%SZ"`" \
            --build-arg "VCS_REF=$CIRCLE_SHA1" \
            .
          docker login -u "$DOCKER_USER" -p "$DOCKER_PASS"
          docker push "brianmay/spud:latest"

  verify-version:
    docker:
      - image: circleci/python:3.7
        environment:
          PIPENV_VENV_IN_PROJECT: true
    steps:
      - checkout
      - restore_cache:
          key: deps-{{ .Branch }}-{{ checksum "Pipfile.lock" }}
      - run:
          name: Verify git tag vs. version
          command: |
            pipenv run ./setup.py verify --version "$CIRCLE_TAG"

  deploy-prod-pypi:
    docker:
      - image: circleci/python:3.7
        environment:
          PIPENV_VENV_IN_PROJECT: true
    steps:
      - checkout
      - restore_cache:
          key: deps-{{ .Branch }}-{{ checksum "Pipfile.lock" }}
      - run:
          name: Init .pypirc
          command: |
            echo -e "[pypi]" >> ~/.pypirc
            echo -e "username = $PYPI_USER" >> ~/.pypirc
            echo -e "password = $PYPI_PASS" >> ~/.pypirc
      - run:
          name: Create packages
          command: |
            pipenv run ./setup.py sdist bdist_wheel
      - run:
          name: Upload to pypi
          command: |
            pipenv run twine upload dist/*

  deploy-prod-docker:
    docker:
      - image: circleci/python:3.7
    steps:
      - checkout # check out the code in the project directory
      - run:
          name: Build and upload docker image
          command: |
            docker build \
              --file "Dockerfile" \
              --tag "brianmay/spud:$CIRCLE_TAG" \
              --build-arg "BUILD_DATE=`date -u +"%Y-%m-%dT%H:%M:%SZ"`" \
              --build-arg "VCS_REF=$CIRCLE_SHA1" \
              .
            docker login -u "$DOCKER_USER" -p "$DOCKER_PASS"
            docker push "brianmay/spud:$CIRCLE_TAG"

workflows:
  version: 2
  build-deploy:
    jobs:
      - build:
          filters:
            tags:
              only: /.*/
      - deploy-beta:
          context: Docker
          requires:
            - build
          filters:
            branches:
              only: master
      - verify-version:
          context: pypi
          requires:
            - build
          filters:
            tags:
              only: /[0-9]+(\.[0-9]+)*/
            branches:
              ignore: /.*/
      - deploy-prod-pypi:
          context: pypi
          requires:
            - verify-version
          filters:
            tags:
              only: /.*/
      - deploy-prod-docker:
          context: Docker
          requires:
            - verify-version
          filters:
            tags:
              only: /.*/
